source('C:/Users/mheard/Desktop/Time Series EEOC_MHCopy.R')
source('C:/Users/mheard/Desktop/Geo Join With OSHA Accidents.R')
UFN3<- UFN2[UFN2$E_AreaName %in% c("CAPITAL METRO", "EASTERN", "GREAT LAKES",
"NORTHEAST", "PACIFIC", "SOUTHERN", "WESTERN"),]
###############################################################################
#
# Merge Accident and UFN tables to get full geographic info for accidents.
#
###############################################################################
Accident3 <- unique(merge(Accident2, UFN3, by = "UFN", All.Accident2 = TRUE))
###############################################################################
#
# Count by area and district
#
###############################################################################
#------------------#
# INPUT FIELDS!!!! #
#------------------#
# List the fields that need to be stratified
for (x in c("E_AreaName", "E_PFCName")){
# Assigns "list" to be the possible responses in the fields to stratify on, loops through all fields
assign("list", eval(parse( text = paste0("list(unique(Accident3$",x,"))"))))
# Count is being summed.... grouped by month, year, and the stratification field
df <- aggregate(Accident3$count, Accident3[,c("month","year",x)], FUN = sum)
# Loop through each possible response within the stratify variable
for (i in unlist(list)){
# Subset down to all responses for 1 response in for the stratified field
assign("df1", eval(parse( text = paste0("subset(df, ",x," == i)"))))
# Remove the row.names field
row.names(df1) <- NULL
# Name the field as the subsetted response
df1 <- rename(df1, c(x = i))
# Remove the column left over
df1[3] <- NULL
# Check to see if fullData already exists
if(exists("AccidentCounts")){
# If it exists, merge the new response onto the AccidentCounts object
AccidentCounts <- merge(
AccidentCounts, df1,
by = c("year", "month"),
all.x = TRUE, all.y = TRUE)
# If fullData does not exist, set the new response to the fullData object
} else {
AccidentCounts <- df1
}
}
}
# Clean up workspace
rm(df, df1, list, i, x)
#----------Next-Steps-------------#
# Fill in missing months with 0's #
#---------------------------------#
minYear <- min(AccidentCounts$year)
maxYear <- max(AccidentCounts$year)
minMonth <- min(subset(AccidentCounts, year == minYear)$month)
maxMonth <- max(subset(AccidentCounts, year == maxYear)$month)
year <- c(rep(minYear, each = (13 - minMonth)),
rep(c((minYear + 1):(maxYear - 1)), each = 12),
rep(maxYear, each = (maxMonth)))
month <- c(seq(minMonth,12),
rep(1:12, (maxYear - minYear - 1)),
seq(1,maxMonth))
timeSeries <- data.frame(month, year)
AccidentHistCnt <- merge(
AccidentCounts, timeSeries,
by = c("year", "month"),
all.AccidentCounts = TRUE)
rm( minYear, maxYear, minMonth, maxMonth, year, month, timeSeries )
# Set all the 'NA' to 0
AccidentCnt[is.na(AccidentCnt)] <- 0
#import data
UFN <- read.delim("R:/IRAT_Misc/ELDER Working Folder - Controller Model/Refresh 11 - October 2013/Master Lists/MasterUFNList_2013_10.txt",
header = TRUE,
sep = "|")
rstudio::viewData(UFN2)
#select key variables
UFN2 <- unique(subset(UFN, select = c("E_LeadFinanceNumber",
#making unique by area and district only "ZIPCode",
"E_AreaName",
"E_PFCName")))
#add leading zero to finance numbers
UFN2$UFN <- sprintf("%06d",UFN2$E_LeadFinanceNumber)
UFN2$E_LeadFinanceNumber <- NULL
#subsetting rows with these 7 area names; omits headquarter labels
UFN3<- UFN2[UFN2$E_AreaName %in% c("CAPITAL METRO", "EASTERN", "GREAT LAKES",
"NORTHEAST", "PACIFIC", "SOUTHERN", "WESTERN"),]
###############################################################################
#
# Merge Accident and UFN tables to get full geographic info for accidents.
#
###############################################################################
Accident3 <- unique(merge(Accident2, UFN3, by = "UFN", All.Accident2 = TRUE))
###############################################################################
#
# Count by area and district
#
###############################################################################
#------------------#
# INPUT FIELDS!!!! #
#------------------#
# List the fields that need to be stratified
for (x in c("E_AreaName", "E_PFCName")){
# Assigns "list" to be the possible responses in the fields to stratify on, loops through all fields
assign("list", eval(parse( text = paste0("list(unique(Accident3$",x,"))"))))
# Count is being summed.... grouped by month, year, and the stratification field
df <- aggregate(Accident3$count, Accident3[,c("month","year",x)], FUN = sum)
# Loop through each possible response within the stratify variable
for (i in unlist(list)){
# Subset down to all responses for 1 response in for the stratified field
assign("df1", eval(parse( text = paste0("subset(df, ",x," == i)"))))
# Remove the row.names field
row.names(df1) <- NULL
# Name the field as the subsetted response
df1 <- rename(df1, c(x = i))
# Remove the column left over
df1[3] <- NULL
# Check to see if fullData already exists
if(exists("AccidentCounts")){
# If it exists, merge the new response onto the AccidentCounts object
AccidentCounts <- merge(
AccidentCounts, df1,
by = c("year", "month"),
all.x = TRUE, all.y = TRUE)
# If fullData does not exist, set the new response to the fullData object
} else {
AccidentCounts <- df1
}
}
}
# Clean up workspace
rm(df, df1, list, i, x)
#----------Next-Steps-------------#
# Fill in missing months with 0's #
#---------------------------------#
minYear <- min(AccidentCounts$year)
maxYear <- max(AccidentCounts$year)
minMonth <- min(subset(AccidentCounts, year == minYear)$month)
maxMonth <- max(subset(AccidentCounts, year == maxYear)$month)
year <- c(rep(minYear, each = (13 - minMonth)),
rep(c((minYear + 1):(maxYear - 1)), each = 12),
rep(maxYear, each = (maxMonth)))
month <- c(seq(minMonth,12),
rep(1:12, (maxYear - minYear - 1)),
seq(1,maxMonth))
timeSeries <- data.frame(month, year)
AccidentHistCnt <- merge(
AccidentCounts, timeSeries,
by = c("year", "month"),
all.AccidentCounts = TRUE)
rm( minYear, maxYear, minMonth, maxMonth, year, month, timeSeries )
# Set all the 'NA' to 0
AccidentCnt[is.na(AccidentCnt)] <- 0
AccidentHistCnt[is.na(AccidentHistCnt)] <- 0
rstudio::viewData(AccidentHistCnt)
rstudio::viewData(AccidentHistCnt)
rstudio::viewData(PreComHistCnt)
rstudio::viewData(PreComHistCnt)
pre <- read.table("R:/IRAT_Misc/CSEC Model/Employee/EEOC/SAS Files/all_pre.txt",
header = TRUE,
# Read in the precomplaints data
pre <- read.table("R:/IRAT_Misc/CSEC Model/Employee/EEOC/SAS Files/all_pre.txt",
header = TRUE,
sep = "|")
rstudio::viewData(pre)
rstudio::viewData(pre)
pre$PCID <- NULL
pre$COMPLAINTID <- NULL
pre$METHOD <- NULL
pre$CLOSUREDATE <- NULL
pre$OFFICEID <- NULL
pre$ZIP
pre$PCID <- NULL
pre$COMPLAINTID <- NULL
pre$METHOD <- NULL
pre$CLOSUREDATE <- NULL
pre$OFFICEID <- NULL
pre$ZIP <- NULL
pre$RECEIVEDDATE2 <- as.Date(pre$RECEIVEDDATE, format = "%m/%d/%Y")
pre$RECEIVEDDATE <- NULL
pre$month <- month(pre$RECEIVEDDATE2)
pre$year <- year(pre$RECEIVEDDATE2)
pre$count <- 1
rstudio::viewData(pre)
rstudio::viewData(pre)
PreComUnique <- unique(pre)
rstudio::viewData(PreComUnique)
rstudio::viewData(PreComUnique)
Accident <- read.delim("R:/IRAT_Misc/CSEC Model/Employee/OHSA/Accident Log/AccidentLogQuery.txt",
header = TRUE,
sep = "|")
#select key variables
Accident2 <- unique(subset(Accident, select = c("FinanceNumber", "AccidentPeriodID")))
# Format date
Accident2$Date<- as.Date(Accident2$AccidentPeriodID, format = "%m/%d/%Y")
Accident2$AccidentPeriodID <- NULL
Accident2$month <- month(Accident2$Date)
Accident2$year <- year(Accident2$Date)
Accident2$count <- 1
# Remove duplicates
AccidentUnique <- unique(Accident2)
PreAccCorr <- merge(PreComUnique , AccidentUnique by = c("year", "month"),
all.PreComUnique = TRUE, all.AccidentUnique = TRUE)
PreAccCorr <- merge(PreComUnique, AccidentUnique, by = c("year", "month"),
all.PreComUnique = TRUE, all.AccidentUnique = TRUE)
rstudio::viewData(AccidentUnique)
rstudio::viewData(AccidentUnique)
rstudio::viewData(Accident)
rstudio::viewData(Accident)
rstudio::viewData(Accident2)
rstudio::viewData(Accident2)
test<- aggregate(PreComUnique$count, Accident3[,c("month","year")], FUN = sum)
test<- aggregate(PreComUnique$count, PreComUnique[,c("month","year")], FUN = sum)
rstudio::viewData(test)
rstudio::viewData(test)
PreComOvrCnt <- setnames(PreComOvrCnt , "xe", "Overall Count")
PreComOvrCnt <- setnames(PreComOvrCnt, "x", "Overall Count")
colnames(aggdata) <- c("month","year", "OvrCnt")
colnames(PreComOvrCnt) <- c("month","year", "OvrCnt")
PreComOvrCnt <- aggregate(PreComUnique$count, PreComUnique[,c("month","year")], FUN = sum)
colnames(PreComOvrCnt) <- c("month","year", "OvrCnt")
rstudio::viewData(PreComOvrCnt)
rstudio::viewData(PreComOvrCnt)
AccOvrCnt <- aggregate(AccidentUnique$count, AccidentUnique[,c("month","year")], FUN = sum)
colnames(AccOvrCnt) <- c("month","year", "OvrCnt")
rstudio::viewData(AccOvrCnt)
rstudio::viewData(AccOvrCnt)
PreAccCorr <- merge(PreComOvrCnt, AccOvrCnt, by = c("year", "month"))
rstudio::viewData(PreAccCorr)
rstudio::viewData(PreAccCorr)
rstudio::viewData(PreAccCorr)
PreAccCorr <- merge(PreComOvrCnt, AccOvrCnt, by = c("year", "month"),
all.PreComOvrCnt = TRUE, all.AccOvrCnt = TRUE)
rstudio::viewData(PreAccCorr)
rstudio::viewData(PreAccCorr)
PreAccCorr <- PreAccCorr[order("year", "month"),]
rstudio::viewData(PreAccCorr)
rstudio::viewData(PreAccCorr)
PreAccCorr <- merge(PreComOvrCnt, AccOvrCnt, by = c("year", "month"),
all.PreComOvrCnt = TRUE, all.AccOvrCnt = TRUE)
PreAccCorr2 <- PreAccCorr[order("year", "month"),]
colnames(PreAccCorr) <- c("month","year", "OvrCntPre", "OvrCntAcc")
rstudio::viewData(PreAccCorr)
rstudio::viewData(PreAccCorr)
Accident2 <- unique(subset(Accident, select = c("FinanceNumber", "AccidentPeriodID")))
# Format date
Accident2$Date<- as.Date(Accident2$AccidentPeriodID, format = "%m/%d/%Y")
Accident2$AccidentPeriodID <- NULL
Accident2$month <- month(Accident2$Date)
Accident2$year <- year(Accident2$Date)
Accident2$count <- 1
rstudio::viewData(Accident2)
rstudio::viewData(Accident2)
AccidentUnique <- unique(Accident2)
#count occurences by month and year
AccOvrCnt <- aggregate(AccidentUnique$count, AccidentUnique[,c("month","year")], FUN = sum)
colnames(AccOvrCnt) <- c("month","year", "OvrCnt")
rstudio::viewData(AccOvrCnt)
rstudio::viewData(AccOvrCnt)
rstudio::viewData(PreComOvrCnt)
rstudio::viewData(PreComOvrCnt)
colnames(PreAccCorr) <- c("year" "month", "OvrCntPre", "OvrCntAcc")
PreAccCorr2 <- PreAccCorr[order("year", "month"),]
PreAccCorr <- merge(PreComOvrCnt, AccOvrCnt, by = c("year", "month"),
all.PreComOvrCnt = TRUE, all.AccOvrCnt = TRUE)
colnames(PreAccCorr) <- c("year" "month", "OvrCntPre", "OvrCntAcc")
PreAccCorr2 <- PreAccCorr[order("year", "month"),]
colnames(PreAccCorr) <- c("year", "month", "OvrCntPre", "OvrCntAcc")
PreAccCorr2 <- PreAccCorr[order("year", "month"),]
rstudio::viewData(PreAccCorr2)
rstudio::viewData(PreAccCorr2)
as.numeric[c("year", "month")]
PreAccCorr2 <- PreAccCorr[order("year", "month"),]
as.numeric[c(PreAccCorr$year, PreAccCorr$month)]
class(PreAccCorr$year)
class(PreAccCorr)
class(PreAccCorr$month)
PreAccCorr2 <- PreAccCorr[order("year", "month"),]
rstudio::viewData(PreAccCorr2)
rstudio::viewData(PreAccCorr2)
PreAccCorr <- merge(PreComOvrCnt, AccOvrCnt, by = c("year", "month"),
all.PreComOvrCnt = TRUE, all.AccOvrCnt = TRUE, sort = TRUE)
colnames(PreAccCorr) <- c("year", "month", "OvrCntPre", "OvrCntAcc")
rstudio::viewData(PreAccCorr)
rstudio::viewData(PreAccCorr)
PreAccCorr <- merge(PreComOvrCnt, AccOvrCnt, by = c("year", "month"),
all.PreComOvrCnt = TRUE, all.AccOvrCnt = TRUE, sort = TRUE)
rstudio::viewData(PreAccCorr)
rstudio::viewData(PreAccCorr)
PreAccCorr <- merge(PreComOvrCnt, AccOvrCnt, by = c("month", "year"),
all.PreComOvrCnt = TRUE, all.AccOvrCnt = TRUE, sort = TRUE)
colnames(PreAccCorr) <- c("month", "year", "OvrCntPre", "OvrCntAcc")
rstudio::viewData(PreAccCorr)
rstudio::viewData(PreAccCorr)
?merge
PreAccCorr <- merge(PreComOvrCnt, AccOvrCnt, by = c("month", "year"),
all.PreComOvrCnt = TRUE, all.AccOvrCnt = TRUE)
colnames(PreAccCorr) <- c("month", "year", "OvrCntPre", "OvrCntAcc")
rstudio::viewData(PreAccCorr)
rstudio::viewData(PreAccCorr)
PreAccCorr2 <- PreAccCorr[order("year", "month"),]
PreAccCorr2 <- PreAccCorr[order(year, month),]
PreAccCorr <- PreAccCorr[order(PreAccCorr$year, PreAccCorr$month)
PreAccCorr <- PreAccCorr[order(PreAccCorr$year, PreAccCorr$month),]
rstudio::viewData(PreAccCorr)
rstudio::viewData(PreAccCorr)
install.packages("Hmisc")
library("Hmisc", lib.loc="C:/Users/mheard/Desktop/R- tools/tools/R/App/R-Portable/library")
rcorr(PreAccCorr, type="pearson") # type can be pearson or spearman
rcorr(x, type="pearson") # type can be pearson or spearman
cor (PreAccCorr$OvrCntPre, PreAccCorr$OvrCntAcc)
plot(PreAccCorr$OvrCntPre, PreAccCorr$OvrCntAcc, xlab="PreComplaint Counts", ylab="Accident Counts")
plot(PreAccCorr$OvrCntPre, PreAccCorr$OvrCntAcc, xlab="PreComplaint Counts", ylab="Accident Counts",
main="Correlation of Pre-Complaint and Accident Counts")
main="Correlation of Pre-Complaint & Accident Counts")
plot(PreAccCorr$OvrCntPre, PreAccCorr$OvrCntAcc, xlab="PreComplaint Counts", ylab="Accident Counts",
main="Correlation of Pre-Complaint & Accident Counts")
abline(lm(OvrCntPre~OvrCntAcct), col="red") # regression line (y~x)
abline(lm(OvrCntPre~OvrCntAcct), col="red") # regression line (y~x)
rcorr(as.matrix(PreAccCorr))
rcorr(PreAccCorr, type="pearson") # type can be pearson or spearman
abline(lm(OvrCntAcct~OvrCntPre), col="red") # regression line (y~x)
attach(PreAccCorr)
abline(lm(OvrCntAcct~OvrCntPre), col="red") # regression line (y~x)
abline(lm(OvrCntAcc~OvrCntPre), col="red") # regression line (y~x)
lines(lowess(OvrCntPre, OvrCntAcc), col="blue") # lowess line (x,y)
capitalmetro <- read.delim("R:/IRAT_Misc/CSEC Model/Employee/Employee Surveys/VOE Average Outputs/Correlations Capital Metro.csv")
viewData(capitalmetro)
rstudio::viewData(capitalmetro)
rstudio::viewData(capitalmetro)
Correlations.Capital.Metro <- read.delim("R:/IRAT_Misc/CSEC Model/Employee/Employee Surveys/VOE Average Outputs/Correlations Capital Metro.txt")
viewData(Correlations.Capital.Metro)
ViewData(Correlations.Capital.Metro)
rstudio::viewData(Correlations.Capital.Metro)
rstudio::viewData(Correlations.Capital.Metro)
cor(Correlations.Capital.Metro, use="complete.obs", method="kendall")
class(Correlations.Capital.Metro)
class(Correlations.Capital.Metro$capitalmetro1)
class(Correlations.Capital.Metro$Q15AvgGeo)
class(Correlations.Capital.Metro$Q15AvgGood)
source('S:/OI/abrooks/R/functions/tableNet/tableNet.R')
db2shiny('R:/IRAT_Misc/CSEC Model/Employee/EEOC/EEO Extract 2-22-13')
db2shiny('R:/IRAT_Misc/CSEC Model/Employee/EEOC/EEO Extract 2-22-13')
db2shiny('R:/IRAT_Misc/CSEC Model/Employee/EEOC/EEO Extract 2-22-13')
