d <- data.frame(
eye = sample(c('brown', 'green', 'blue', 'hazel'), n, replace=T),
gender = sample(c('male', 'female'), n, replace=T),
height = sort(sample(c('dwarf', 'short', 'average', 'above average', 'giant'), n, replace=T)),
wealth = sort(sample(c('poor', 'struggling', 'middle', 'uppermiddle', 'comfortable', 'rich', '1%', 'millionaire', 'billionaire'), n, replace=T)),
favoriteAnimal = sample(c('dog', 'cat', 'bat', 'frog', 'lion', 'cheetah', 'lion', 'walrus', 'squirrel'), n, replace=T),
numkids = abs(round(rnorm(n, 2, 1)))
)
## adding some pattern
d$numkids[d$gender=='male'] <- d$numkids[d$gender=='male'] + sample(0:3, sum(d$gender=='male'), replace=T)
d$numkids <- factor(d$numkids)
## calling Shiny App to visualize association rules
arulesApp(d)
?igraph
require('devtools')
install_github('brooksandrew/Rsenal')
require('Rsenal')
n <- 10000 # of obs
d <- data.frame(
eye = sample(c('brown', 'green', 'blue', 'hazel'), n, replace=T),
gender = sample(c('male', 'female'), n, replace=T),
height = sort(sample(c('dwarf', 'short', 'average', 'above average', 'giant'), n, replace=T)),
wealth = sort(sample(c('poor', 'struggling', 'middle', 'uppermiddle', 'comfortable', 'rich', '1%', 'millionaire', 'billionaire'), n, replace=T)),
favoriteAnimal = sample(c('dog', 'cat', 'bat', 'frog', 'lion', 'cheetah', 'lion', 'walrus', 'squirrel'), n, replace=T),
numkids = abs(round(rnorm(n, 2, 1)))
)
## adding some pattern
d$numkids[d$gender=='male'] <- d$numkids[d$gender=='male'] + sample(0:3, sum(d$gender=='male'), replace=T)
d$numkids <- factor(d$numkids)
## calling Shiny App to visualize association rules
arulesApp(d)
?igraph
search()
setwd('C:/Users/abrooks/Documents/github/shinyapps/wmataAPI/')
runApp()
require('shiny')
runApp()
install.packages('jsonlite')
runApp()
install.packageS('ggmap')
install.packages('ggmap')
runApp()
install.packageS('geosphere')
install.packages('geosphere')
runApp()
require('RCurl')
require('jsonlite')
require('ggmap')
## setting up request
baseurl <- 'http://api.wmata.com/Bus.svc/json/jBusPositions?routeId='
route <- '64'
endurl <- '&includingVariations=true&lat=0&lon=0&radius=0&api_key='
## hit API once
request <- paste(baseurl, route, endurl, key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dl <- fromJSON(temp, simplifyVector=T)
require('RCurl')
require('jsonlite')
require('ggmap')
## setting up request
baseurl <- 'http://api.wmata.com/Bus.svc/json/jBusPositions?routeId='
key <- 'x42rp9qg6jjjydn2u8ng8stx'
route <- '64'
endurl <- '&includingVariations=true&lat=0&lon=0&radius=0&api_key='
## hit API once
request <- paste(baseurl, route, endurl, key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dl <- fromJSON(temp, simplifyVector=T)
rm(list=ls())
require('RCurl')
require('jsonlite')
require('ggmap')
## setting up request
baseurl <- 'http://api.wmata.com/Bus.svc/json/jBusPositions?routeId='
key <- 'x42rp9qg6jjjydn2u8ng8stx'
route <- '64'
endurl <- '&includingVariations=true&lat=0&lon=0&radius=0&api_key='
## hit API once
request <- paste(baseurl, route, endurl, key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dl <- fromJSON(temp, simplifyVector=T)
request <- paste(baseurl, route, endurl, key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dl <- data.frame(fromJSON(temp, simplifyVector=T))
View(dl)
request <- paste('http://api.wmata.com/Bus.svc/json/jRoutes?api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
buses <- fromJSON(temp, simplifyVector=T)
buses
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', '64', '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
stopsL <- fromJSON(temp, simplifyVector=T)
stopsL
key <- 'x42rp9qg6jjjydn2u8ng8stx'
## BUS POSITIONS
route = input$busid
request <- paste'http://api.wmata.com/Bus.svc/json/jBusPositions?routeId=', route, '&includingVariations=true&lat=0&lon=0&radius=0&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfbus <- data.frame(fromJSON(temp, simplifyVector=T))
route = input$busid
route = '64'
request <- paste('http://api.wmata.com/Bus.svc/json/jBusPositions?routeId=', route, '&includingVariations=true&lat=0&lon=0&radius=0&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfbus <- data.frame(fromJSON(temp, simplifyVector=T))
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', route, '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
stops <- fromJSON(temp, simplifyVector=T)
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', route, '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
dfstops <- fromJSON(temp, simplifyVector=T)
dfstops$Direction0$Stops
dfstops$Direction0$Stops[sample(1:nrow(dfstops$Direction0$Stops), 1),2]
dfstops$Direction0$Stops[sample(1:nrow(dfstops$Direction0$Stops), 1),2]
dfstops$Direction0$Stops[sample(1:nrow(dfstops$Direction0$Stops), 1),2]
dfstops$Direction0$Stops[sample(1:nrow(dfstops$Direction0$Stops), 1),2]
dfstops$Direction0$Stops
dfstops$Direction0$Stops[sample(1:nrow(dfstops$Direction0$Stops), 1),'StopID']
dfstops$Direction0$Stops[sample(1:nrow(dfstops$Direction0$Stops), 1),'StopID']
stopID <- dfstops$Direction0$Stops[sample(1:nrow(dfstops$Direction0$Stops), 1),'StopID']
request <- paste('http://api.wmata.com/NextBusService.svc/json/jPredictions?StopID=', stopID, '&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfpred <- data.frame(fromJSON(temp, simplifyVector=T))
View(dfbus)
View(dfpred)
dfstopsL <- fromJSON(temp, simplifyVector=T)
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', route, '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
dfstopsL <- fromJSON(temp, simplifyVector=T)
0
dfstops <- dfstopsL$Direction0
dfstops <- dfstopsL$Direction0$Stops
dfstops
rm(list=ls())
## BUS POSITIONS
route = '64'
request <- paste('http://api.wmata.com/Bus.svc/json/jBusPositions?routeId=', route, '&includingVariations=true&lat=0&lon=0&radius=0&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfbus <- data.frame(fromJSON(temp, simplifyVector=T))
## BUS STOPS
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', route, '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
dfstopsL <- fromJSON(temp, simplifyVector=T)
dfstops <- dfstopsL$Direction0$Stops
## BUS PREDICTIONS
stopID <- dfstops$Direction0$Stops[sample(1:nrow(dfstops$Direction0$Stops), 1),'StopID']
request <- paste('http://api.wmata.com/NextBusService.svc/json/jPredictions?StopID=', stopID, '&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfpred <- data.frame(fromJSON(temp, simplifyVector=T))
key <- 'x42rp9qg6jjjydn2u8ng8stx'
## BUS POSITIONS
route = '64'
request <- paste('http://api.wmata.com/Bus.svc/json/jBusPositions?routeId=', route, '&includingVariations=true&lat=0&lon=0&radius=0&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfbus <- data.frame(fromJSON(temp, simplifyVector=T))
## BUS STOPS
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', route, '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
dfstopsL <- fromJSON(temp, simplifyVector=T)
dfstops <- dfstopsL$Direction0$Stops
## BUS PREDICTIONS
stopID <- dfstops$Direction0$Stops[sample(1:nrow(dfstops$Direction0$Stops), 1),'StopID']
request <- paste('http://api.wmata.com/NextBusService.svc/json/jPredictions?StopID=', stopID, '&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfpred <- data.frame(fromJSON(temp, simplifyVector=T))
stopID <- dfstops[sample(1:nrow(dfstops), 1),'StopID']
request <- paste('http://api.wmata.com/NextBusService.svc/json/jPredictions?StopID=', stopID, '&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfpred <- data.frame(fromJSON(temp, simplifyVector=T))
head(dfbus)
head(dfpred)
head(dfstops)
dfstopsL
route = '5A'
request <- paste('http://api.wmata.com/Bus.svc/json/jBusPositions?routeId=', route, '&includingVariations=true&lat=0&lon=0&radius=0&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfbus <- data.frame(fromJSON(temp, simplifyVector=T))
## BUS STOPS
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', route, '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
dfstopsL <- fromJSON(temp, simplifyVector=T)
dfstops <- dfstopsL$Direction0$Stops
## BUS PREDICTIONS
stopID <- dfstops[sample(1:nrow(dfstops), 1),'StopID']
request <- paste('http://api.wmata.com/NextBusService.svc/json/jPredictions?StopID=', stopID, '&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfpred <- data.frame(fromJSON(temp, simplifyVector=T))
head(dfbus)
head(dfpred)
head(dfstops)
dfstopsL
head(dfStopsL()
head(dfStopsL)
head(dfstopsL)
dfstopsL$Direction0
head(dfbus)
head(dfpred)
runApp()
source('~/.active-rstudio-document', echo=TRUE)
pres <- c(" Obama, B.","Bush, G.W.","Obama, B.H.","Clinton, W.J.")
sapply(pres,agrep,pres)
?agrep
agrep("lasy", "1 lazy 2")
agrep("lasy", c(" 1 lazy 2", "1 lasy 2"), max = list(sub = 0))
agrep(pattern='south to lenfant plaza', 'SOUTH or east to L enfant Plaza")
agrep(pattern='south to lenfant plaza', "SOUTH or east to L enfant Plaza")
agrep(pattern='south to lenfant plaza', c("SOUTH or east to L enfant Plaza", "bn;a"))
library('stringdist')
install.packages('stringdist')
library('stringdist')
stringdist(pattern='south to lenfant plaza', c("SOUTH or east to L enfant Plaza", "bn;a"))
stringdist('south to lenfant plaza', c("SOUTH or east to L enfant Plaza", "bn;a"))
?stringdist
stringdist('south to lenfant plaza', c("SOUTH or east to L enfant Plaza", "bn;a", "lenfant plaza", "sdsdsd"))
stringdist("hello","HeLl0",method="h")
stringdist('abc','cba',method='qgram',q=1)
head(dfbus)
head(dfpred)
head(dfstops)
dfstopsL$Direction0$DirectionNum
dfstopsL$Direction0$DirectionText
dfstopsL$Direction0$Stops
dfstopsL$Direction0$Shape
dfstopsL$Direction0$TripHeadsign
stops
dfstopsL$
dfstopsL
names(dfstops)
names(dfstopsL)
print(Directions)
runApp()
runApp()
runApp()
dfstopsL[['Direction1']]
dfstopsL[['Direction1']]['DirectionText']
dfstopsL[['Direction1']]$DirectionText
tolower('SS')
runApp()
runApp()
runApp()
source('~/github/shinyapps/sampleOfAPICalls.R', echo=TRUE)
head(dfbus)
head(dfpred)
head(dfstops)
dfstopsL$Direction0$TripHeadsign
dfstopsL$Direction1$TripHeadsign
dfpred$Predictions.DirectionText
tolower(dfpred$Predictions.DirectionText)
runApp()
runApp()
dfpred
x <- c(5, 1, 1, 5,3)
x[which(x)==min(x)]
x[which(x==min(x))]
x
which(x==min(x))
runApp()
runApp()
head(dfbus)
head(dfpred)
dfstopsL$Direction0$TripHeadsign
route = '64'
request <- paste('http://api.wmata.com/Bus.svc/json/jBusPositions?routeId=', route, '&includingVariations=true&lat=0&lon=0&radius=0&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfbus <- data.frame(fromJSON(temp, simplifyVector=T))
## BUS STOPS
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', route, '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
dfstopsL <- fromJSON(temp, simplifyVector=T)
dfstops <- dfstopsL$Direction0$Stops
## BUS PREDICTIONS
stopID <- dfstops[sample(1:nrow(dfstops), 1),'StopID']
request <- paste('http://api.wmata.com/NextBusService.svc/json/jPredictions?StopID=', stopID, '&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfpred <- data.frame(fromJSON(temp, simplifyVector=T))
head(dfbus)
head(dfpred)
head(dfstops)
dfdata
dfbus
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('helperFunctions.R')
runApp()
runApp()
dfstopsL$Direction0$Stops$Name
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
findClosestStop <- function(allStops, myStop) {
dist <- sapply(2:nrow(allStops), function(x) distHaversine(c(allStops$Lon[x], allStops$Lat[x]), myStop))
closestStop <- allStops[which(dist==min(dist)),]
return(closestStop)
}
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', '64', '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
stopsL <- fromJSON(temp, simplifyVector=T)
stops <- stopsL$Direction0$Stops
baseurl <- 'http://api.wmata.com/Bus.svc/json/jBusPositions?routeId='
key <- 'x42rp9qg6jjjydn2u8ng8stx'
route <- '64'
endurl <- '&includingVariations=true&lat=0&lon=0&radius=0&api_key='
## hit API once
request <- paste(baseurl, route, endurl, key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dl <- data.frame(fromJSON(temp, simplifyVector=T))
busStop <- findClosestStop(stops, c(dl$BusPositions$Lon[1], dl$BusPositions$Lat[1]))[1,'StopID']
c(dl$BusPositions$Lon[1], dl$BusPositions$Lat[1])
dl
dl$BusPositions$Lon[1]
dl$BusPositions
busStop <- findClosestStop(stops, c(dl$BusPositions.Lon[1], dl$BusPositions.Lat[1]))[1,'StopID']
busStop
findClosestStop(stops, c(dl$BusPositions.Lon[1], dl$BusPositions.Lat[1]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
stops
dfstopsL$Direction0
stops
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1/5280
?distHaversine
1/1609.34
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
busdf
dfbus
runApp()
runApp()
runApp()
mtcars[1:1,]
runApp()
runApp()
runApp()
runApp(*)
runApp()
runApp()
runApp()
runApp()
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', '64', '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
stopsL <- fromJSON(temp, simplifyVector=T)
stops <- stopsL$Direction0$Stops
map <- get_map(location = c(stops$Lon[1], stops$Lat[1]), zoom=13)
mapPoints <- ggmap(map) +
geom_point(aes(x=Lon, y=Lat), data=stops, alpha=0.85)
plot(mapPoints)
require('ggmaps')
map <- get_map(location = c(busdf$BusPositions.Lon[1], busdf$BusPositions.Lat[1]), zoom=13)
mapPoints <- ggmap(map) +
geom_point(aes(x=BusPositions.Lon, y=BusPositions.Lat), data=busdf, alpha=0.25)
plot(mapPoints)
route = '64'
request <- paste('http://api.wmata.com/Bus.svc/json/jBusPositions?routeId=', route, '&includingVariations=true&lat=0&lon=0&radius=0&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
busdf <- data.frame(fromJSON(temp, simplifyVector=T))
require('ggmaps')
map <- get_map(location = c(busdf$BusPositions.Lon[1], busdf$BusPositions.Lat[1]), zoom=13)
mapPoints <- ggmap(map) +
geom_point(aes(x=BusPositions.Lon, y=BusPositions.Lat), data=busdf, alpha=0.25)
plot(mapPoints)
map <- get_map(location = c(busdf$BusPositions.Lon[1], busdf$BusPositions.Lat[1]), zoom=13)
mapPoints <- ggmap(map) +
geom_point(aes(x=BusPositions.Lon, y=BusPositions.Lat), data=busdf, alpha=1)
plot(mapPoints)
map <- get_map(location = c(busdf$BusPositions.Lon[1], busdf$BusPositions.Lat[1]), zoom=13, size=7)
mapPoints <- ggmap(map) +
geom_point(aes(x=BusPositions.Lon, y=BusPositions.Lat), data=busdf, alpha=1, size=7)
plot(mapPoints)
runApp()
busdf
route = '64'
request <- paste('http://api.wmata.com/Bus.svc/json/jBusPositions?routeId=', route, '&includingVariations=true&lat=0&lon=0&radius=0&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
busdf <- data.frame(fromJSON(temp, simplifyVector=T))
busdf[busdf$BusPositions.DirectionText=='SOUTH',]
require('ggmaps')
map <- get_map(location = c(busdf$BusPositions.Lon[1], busdf$BusPositions.Lat[1]), zoom=13, size=7)
mapPoints <- ggmap(map) +
geom_point(aes(x=BusPositions.Lon, y=BusPositions.Lat), data=busdf, alpha=1, size=7)
plot(mapPoints)
route = '64'
request <- paste('http://api.wmata.com/Bus.svc/json/jBusPositions?routeId=', route, '&includingVariations=true&lat=0&lon=0&radius=0&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
busdf <- data.frame(fromJSON(temp, simplifyVector=T))
busdf <- busdf[busdf$BusPositions.DirectionText=='SOUTH',]
require('ggmaps')
map <- get_map(location = c(busdf$BusPositions.Lon[1], busdf$BusPositions.Lat[1]), zoom=13)
mapPoints <- ggmap(map) +
geom_point(aes(x=BusPositions.Lon, y=BusPositions.Lat), data=busdf, alpha=1, size=7)
plot(mapPoints)
require('ggmap')
busdf
runApp()
dfstops
mtcars[-1,]
mtcars[,]
runApp()
mtcars[-c(1,2,3,4,5,6,7,8)]
mtcars[-c(1,2,3,4,5,6,7,8),]
mtcars[-c(1,2,3,4,5,6,7,8,9,10,11),]
mtcars[-c(),]
length(c())
runApp()
runApp()
deleted
deleted <-c()
deleted
length(deleted)
length(deleted)==0
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
match(3, :1:5)
match(3, 1:5)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(""="No Buses on the radar :(", )
data.frame(""="No Buses on the radar :(", )
data.frame(a="No Buses on the radar :(", )
data.frame(a="No Buses on the radar :(")
data.frame(""="No Buses on the radar :(")
data.frame(sorry="No Buses on the radar :(")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('helperFunctions')
setwd('C:/Users/abrooks/Documents/github/shinyapps/wmataAPI')
source('helperFunctions')
source('helperFunctions.R')
findClosestStop(dfstops, stopID)
key <- 'x42rp9qg6jjjydn2u8ng8stx'
## BUS POSITIONS
route = '64'
request <- paste('http://api.wmata.com/Bus.svc/json/jBusPositions?routeId=', route, '&includingVariations=true&lat=0&lon=0&radius=0&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfbus <- data.frame(fromJSON(temp, simplifyVector=T))
## BUS STOPS
requestBusStops <- paste('http://api.wmata.com/Bus.svc/json/jRouteDetails?routeId=', route, '&date=', Sys.Date(), '&api_key=', key, sep='')
temp <- getURL(URLencode(requestBusStops), ssl.verifypeer=F)
dfstopsL <- fromJSON(temp, simplifyVector=T)
dfstops <- dfstopsL$Direction0$Stops
## BUS PREDICTIONS
stopID <- dfstops[sample(1:nrow(dfstops), 1),'StopID']
request <- paste('http://api.wmata.com/NextBusService.svc/json/jPredictions?StopID=', stopID, '&api_key=', key, sep='')
temp <- getURL(URLencode(request), ssl.verifypeer=F)
dfpred <- data.frame(fromJSON(temp, simplifyVector=T))
findClosestStop(dfstops, stopID)
dfstops
dfstops$Lat[dfstops$StopID==stopID]
stopLatLon <- c(dfstops$Lon[dfstops$StopID==stopID], dfstops$Lat[dfstops$StopID==stopID])
findClosestStop(dfstops, stopLatLon)
closestStop <- findClosestStop(dfstops, stopLatLon)
closestStop <- findClosestStop(dfstops, stopLatLon)
closestStop2myStop(closestStop$StopID[1], stopID, dfstops)
runApp()
runApp()
runApp()
runApp()
10*60*24
runApp()
runApp()
runApp()
max(1, -1)
max(1, -12)
max(-1, 12)
runApp()
runApp()
runApp()
